{"ast":null,"code":"export const homeWorkReducer = (state, action) => {\n  switch (action.type) {\n    case 'sortUp':\n      {\n        return state.sort(function (a, b) {\n          let nameA = a.name.toLowerCase(),\n              nameB = b.name.toLowerCase();\n          if (nameA < nameB) //sort string ascending\n            return -1;\n          if (nameA > nameB) return 1;\n          return 0; //default return value (no sorting)\n        });\n      }\n\n    case 'sortDown':\n      {\n        return state.sort(function (a, b) {\n          let nameA = a.name.toLowerCase(),\n              nameB = b.name.toLowerCase();\n          if (nameA < nameB) //sort string ascending\n            return 1;\n          if (nameA > nameB) return -1;\n          return 0; //default return value (no sorting)\n        });\n      }\n\n    case 'check':\n      {\n        // need to fix\n        // @ts-ignore\n        return state.sort((_ref, _ref2) => {\n          let {\n            age: a\n          } = _ref;\n          let {\n            age: b\n          } = _ref2;\n          return a - b;\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport const sortUpAC = () => {\n  return {\n    type: 'sortUp',\n    payload: 'up'\n  };\n};\nexport const sortDownAC = () => {\n  return {\n    type: 'sortDown',\n    payload: 'down'\n  };\n};\nexport const checkAC = () => {\n  return {\n    type: 'check',\n    payload: 18\n  };\n};","map":{"version":3,"sources":["/home/aka/Documents/IgnatHomeWork/ignat-task/src/p2-homeworks/h8/bll/homeWorkReducer.ts"],"names":["homeWorkReducer","state","action","type","sort","a","b","nameA","name","toLowerCase","nameB","age","sortUpAC","payload","sortDownAC","checkAC"],"mappings":"AASA,OAAO,MAAMA,eAAe,GAAG,CAACC,KAAD,EAAyBC,MAAzB,KAA0E;AACrG,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AAAe;AACX,eAAOF,KAAK,CAACG,IAAN,CAAW,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAC5B,cAAIC,KAAK,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAZ;AAAA,cAAkCC,KAAK,GAAGJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAA1C;AACA,cAAIF,KAAK,GAAGG,KAAZ,EAAmB;AACf,mBAAO,CAAC,CAAR;AACJ,cAAIH,KAAK,GAAGG,KAAZ,EACI,OAAO,CAAP;AACJ,iBAAO,CAAP,CAN4B,CAMlB;AACb,SAPM,CAAP;AAQH;;AACD,SAAK,UAAL;AAAiB;AACb,eAAOT,KAAK,CAACG,IAAN,CAAW,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAC5B,cAAIC,KAAK,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAZ;AAAA,cAAkCC,KAAK,GAAGJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAA1C;AACA,cAAIF,KAAK,GAAGG,KAAZ,EAAmB;AACf,mBAAO,CAAP;AACJ,cAAIH,KAAK,GAAGG,KAAZ,EACI,OAAO,CAAC,CAAR;AACJ,iBAAO,CAAP,CAN4B,CAMlB;AACb,SAPM,CAAP;AAQH;;AACD,SAAK,OAAL;AAAc;AACV;AACA;AACA,eAAOT,KAAK,CAACG,IAAN,CAAW;AAAA,cAAC;AAACO,YAAAA,GAAG,EAACN;AAAL,WAAD;AAAA,cAAU;AAACM,YAAAA,GAAG,EAACL;AAAL,WAAV;AAAA,iBAAsBD,CAAC,GAACC,CAAxB;AAAA,SAAX,CAAP;AACH;;AACD;AAAS,aAAOL,KAAP;AA1Bb;AA4BH,CA7BM;AA+BP,OAAO,MAAMW,QAAQ,GAAG,MAAM;AAC1B,SAAO;AACHT,IAAAA,IAAI,EAAE,QADH;AAEHU,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,SAAO;AACHX,IAAAA,IAAI,EAAE,UADH;AAEHU,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,OAAO,GAAG,MAAM;AACzB,SAAO;AACHZ,IAAAA,IAAI,EAAE,OADH;AAEHU,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH,CALM","sourcesContent":["import {UserType} from \"../HW8\";\n\nexport type homeWorkReducerType = sortUpACType | sortDownACType | checkACType\n\nexport type sortUpACType = ReturnType<typeof sortUpAC>\nexport type sortDownACType = ReturnType<typeof sortDownAC>\nexport type checkACType = ReturnType<typeof checkAC>\n\n\nexport const homeWorkReducer = (state: Array<UserType>, action: homeWorkReducerType): Array<UserType> => {\n    switch (action.type) {\n        case 'sortUp': {\n            return state.sort(function(a, b){\n                let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();\n                if (nameA < nameB) //sort string ascending\n                    return -1;\n                if (nameA > nameB)\n                    return 1;\n                return 0; //default return value (no sorting)\n            });\n        }\n        case 'sortDown': {\n            return state.sort(function(a, b){\n                let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();\n                if (nameA < nameB) //sort string ascending\n                    return 1;\n                if (nameA > nameB)\n                    return -1;\n                return 0; //default return value (no sorting)\n            });\n        }\n        case 'check': {\n            // need to fix\n            // @ts-ignore\n            return state.sort(({age:a}, {age:b}) => a-b)\n        }\n        default: return state\n    }\n}\n\nexport const sortUpAC = () => {\n    return {\n        type: 'sortUp',\n        payload: 'up'\n    } as const\n}\n\nexport const sortDownAC = () => {\n    return {\n        type: 'sortDown',\n        payload: 'down'\n    } as const\n}\n\nexport const checkAC = () => {\n    return {\n        type: 'check',\n        payload: 18\n    } as const\n}"]},"metadata":{},"sourceType":"module"}